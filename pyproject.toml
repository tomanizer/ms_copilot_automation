[build-system]
requires = ["setuptools>=68"]
build-backend = "setuptools.build_meta"

[project]
name = "ms-copilot-automation"
version = "0.1.0"
description = "Automation toolkit for Microsoft Copilot built with Playwright"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "playwright>=1.40.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
    "keyring>=24.0.0",
    "pyotp>=2.8.0",
    "rich>=13.7.0",
]

[project.scripts]
ms-copilot = "src.cli.main:cli"

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.5.0",
    "types-pyotp>=2.9.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["src", "src.*"]

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "TRY",    # tryceratops
    "RUF",    # ruff-specific rules
]
ignore = [
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method
    "ANN401",  # Dynamically typed expressions (Any)
    "TRY003",  # Avoid specifying long messages outside exception class
    "TRY300",  # Consider moving statement to else block
    "TRY400",  # Use logging.exception instead of logging.error
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
    "TID252",  # Prefer absolute imports (allows relative imports)
    "E501",    # Line too long (we'll use formatter for this)
    "B904",    # raise without from in exception handler
    "PT018",   # Assertion should be broken down
    "RET504",  # Unnecessary assignment before return
    "ARG001",  # Unused function argument
    "RUF012",  # Mutable class attributes
    "RUF059",  # Unpacked variable never used
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN", "ARG", "PLR2004", "S101", "F401"]  # Allow missing annotations, asserts, and unused imports in tests

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = ["playwright.*", "pyotp.*", "keyring.*", "rich.*"]
ignore_missing_imports = true
